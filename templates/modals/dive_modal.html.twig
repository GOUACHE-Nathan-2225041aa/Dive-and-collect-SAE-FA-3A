<div id="dive-modal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden">
    <div class="bg-white p-8 rounded-lg min-w-[40%] max-w-[80%] relative">
        <div class="w-full flex justify-end">
            <button id="close-btn">
                <svg class="w-6 h-6 text-gray-500 hover:text-gray-800" fill="none" stroke="currentColor"
                     viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                          d="M6 18L18 6M6 6l12 12"></path>
                </svg>
            </button>
        </div>

        <div id="flash-messages" class="space-y-2 mb-4"></div>

        <div id="image-thumbnails" class="flex flex-wrap gap-2 my-4">
            {% for photo in photos %}
                <div class="relative mx-1">
                    <img src="{{ asset('/uploads/gallery/' ~ photo.name) }}" alt="dive image"
                         class="w-20 h-20 object-cover rounded">
                    <button type="button"
                            class="absolute top-0.5 right-0.5 bg-red-500 text-white rounded-full w-3 h-3 flex items-center justify-center text-sm delete-image-btn"
                            data-photo-id="{{ photo.id }}">
                        &times;
                    </button>
                </div>
            {% endfor %}
        </div>
        {{ form_start(diveForm, {'action': path('app_dive_edit', {diveId : dive.id})}) }}
        {{ form_end(diveForm) }}
    </div>
</div>
<div id="confirmation-modal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden z-50">
    <div class="bg-white p-8 rounded-lg w-1/3 relative">
        <h2 class="text-lg font-bold mb-4 text-outremer">Confirmation</h2>
        <p class="text-gray-600">Êtes-vous sûr de vouloir supprimer cette image ?</p>
        <div class="mt-6 flex justify-end gap-4">
            <button id="cancel-btn" class="bg-fushia text-white px-4 py-2 rounded">Annuler</button>
            <button type="button" id="confirm-delete-btn" class="bg-red-500 text-white px-4 py-2 rounded">Supprimer</button>
        </div>
        <button id="close-confirmation-modal" class="absolute top-1 right-1 text-gray-500 hover:text-gray-800">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                 xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
        </button>
        <!-- Loader -->
        <div id="loader" class="absolute inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden">
            <div class="spinner-border animate-spin inline-block w-8 h-8 border-4 rounded-full border-t-transparent border-blue-400"></div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        let photoIdToDelete = null;

        // Show confirmation modal on delete button click
        document.querySelectorAll('.delete-image-btn').forEach(button => {
            button.addEventListener('click', function () {
                photoIdToDelete = this.getAttribute('data-photo-id');
                document.getElementById('confirmation-modal').classList.remove('hidden');
            });
        });

        // Hide confirmation modal on cancel button click
        document.getElementById('cancel-btn').addEventListener('click', function () {
            document.getElementById('confirmation-modal').classList.add('hidden');
            photoIdToDelete = null;
        });

        // Hide confirmation modal on close button click
        document.getElementById('close-confirmation-modal').addEventListener('click', function () {
            document.getElementById('confirmation-modal').classList.add('hidden');
            photoIdToDelete = null;
        });

        // Confirm deletion and send request
        document.getElementById('confirm-delete-btn').addEventListener('click', function () {
            if (photoIdToDelete) {

                document.getElementById('loader').classList.remove('hidden');

                fetch(window.location.origin +`/dive/delete-photo/${photoIdToDelete}`, {
                    method: 'DELETE',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest',
                        'Content-Type': 'application/json',
                    },
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            document.querySelector(`[data-photo-id="${photoIdToDelete}"]`).parentElement.remove();
                            displayFlashMessage("success", "Image supprimée avec succès.");
                        } else {
                            displayFlashMessage("error", "Une erreur s'est produite lors de la suppression de l'image.");
                        }
                    })
                    .catch(error => {
                        console.error('Erreur:', error);
                        displayFlashMessage("error", "Une erreur s'est produite. Veuillez réessayer plus tard.");
                    })
                    .finally(() => {
                        document.getElementById('loader').classList.add('hidden');
                        document.getElementById('confirmation-modal').classList.add('hidden');
                        photoIdToDelete = null;
                    });
            }
        });

        // Function to display flash messages
        function displayFlashMessage(type, message) {
            // Create a new flash message element
            const flashMessage = document.createElement('div');
            flashMessage.className = 'flash-message max-w-lg mx-auto p-3 rounded-lg text-center'

            switch (type) {
                case 'success':
                    flashMessage.classList.add('bg-green-200', 'text-green-800');
                    break;
                case 'error':
                    flashMessage.classList.add('bg-red-200', 'text-red-800');
                    break;
                default:
                    flashMessage.classList.add('bg-gray-200', 'text-gray-800');
                    break;
            }
            flashMessage.innerHTML = message;

            // Append to flash messages container
            document.getElementById('flash-messages').appendChild(flashMessage);

            // Auto-hide after 15 seconds
            setTimeout(() => {
                flashMessage.remove();
            }, 15000);
        }
    });
</script>
